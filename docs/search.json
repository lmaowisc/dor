[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Analysis of duration of response in oncology studies",
    "section": "",
    "text": "This R-code implements the analysis of duration-of-response data described in Mao et al. (2024) for oncology studies .\n\nBackground\nDuration-of-response (DOR) is often utilized to assess efficacy of oncology therapies. While valid procedures are available for estimating the mean of DOR (Huang et al. 2018, 2020; Huang and Tian 2022), it is unclear how to estimate its distribution, which may provide a fuller picture. Simple Kaplan–Meier estimates based on the responders can result in distorted conclusions as they ignore the existence of non-responders (whose DOR is zero).\n\n\nNotation and Methodology\n\nFull and Observed Data\nFor a responder, let T_1 denote the time to response. Let T_2 denote the time to disease progression or death. If a patient experiences progression/death first, then T_1=\\infty. The DOR can be defined as [T_2-T_1]_+, where x_+=xI(x&gt;0). Thus, DOR is T_2-T_1 for responders, i.e., those with T_1&lt;\\infty, and 0 for nonresponders. For notational convenience, set T_1=T_2 for nonresponders.\nDue to limited follow-up, the entire distribution of DOR is not identifiable. Instead, we define the restricted DOR within a time window as D=T_2\\wedge \\tau -T_1\\wedge \\tau, where \\tau is a pre-specified restriction time. Our goal is to estimate the survival function of D: S_D(t)=P(D&gt;t), \\,\\,\\,\\,\\, t\\in [0, \\tau].\nLet C denote the censoring time independent of (T_1, T_2) and satisfying P(C\\geq \\tau)&gt;0. Then we observe (X_1,\\Delta_1,X_2,\\Delta_2), where X_1=\\min(T_1\\wedge\\tau, C), \\Delta_1=I(T_1\\wedge\\tau\\leq C), X_2=\\min(T_2\\wedge\\tau,C), and \\Delta_2=I(T_2\\wedge\\tau\\leq C). Write \\tilde D=X_2 - X_1. Here both T_1 and T_2 are subject to the same censoring time C. The observed data consist of n independent and identically distributed (i.i.d.) copies of (X_1,\\Delta_1,X_2,\\Delta_2): \\{(X_{1i},\\Delta_{1i},X_{2i},\\Delta_{2i}): i=1,\\ldots,n\\}. Write \\tilde D_i=X_{2i}- X_{1i}.\n\n\nEstimation and Inference\nA simple estimator of S_D(t) is the inverse probability censoring weighted (IPCW) estimator: \n\\hat S_D(t)=n^{-1}\\sum_{i=1}^n  \\frac{\\Delta_{2i}}{\\hat{G}_C(X_{2i})} I(\\tilde D_i&gt; t),\n where \\hat{G}_C(t) is the Kaplan–Meier estimator of G_C(t)=P(C&gt;t) based on \\{(X_{2i}, 1-\\Delta_{2i}), i=1, \\cdots, n\\}. To see \\hat S_D(t) as a valid estimator, note that \\Delta_{2}=1 implies that X_2=T_2\\wedge\\tau, X_1=T_1\\wedge\\tau and thus that \\tilde D = D. Hence, E\\left\\{\\Delta_2I(\\tilde D&gt;t)/G_C(X_2)\\right\\}= E\\left\\{\\Delta_2I(D&gt;t)/G_C(T_2\\wedge\\tau)\\right\\} =E\\left[E\\left\\{\\Delta_2I(D&gt;t)/G_C(T_2\\wedge\\tau)\\mid T_1, T_2\\right\\}\\right] =E\\{I(D&gt;t)\\}=S_D(t), where the second equality follows by the independence of C and (T_1, T_2). Moreover, we can show that \\hat S_D(t) converges weakly to a Gaussian process with an easily estimable variance function.\nThe median DOR can thus be estimated by \\inf\\{t: \\hat S_D(t)\\leq 0.5\\}, whose variance can be estimated by perturbing the influence functions of \\hat S_D(t) with standard normal random noises.\n\n\n\nUsage and Example\n\nR-program\nTo use the program, download DORfunctions.R from repo https://github.com/lmaowisc/dor. The R-file contains all functions needed to perform the analysis. We also need the standard survival package.\n\nlibrary(survival)\nsource(\"DORfunctions.R\")\n\nThe main function is dorfit(x1, delta1, x2, delta2, tau, med_inf = FALSE).\nInput\n\nx1 time to earliest of response, outcome event, or censoring (X_1)\ndelta1 indicator of response (\\Delta_1)\nx2 time to earlier of outcome event and censoring (X_2)\ndelta2 indicator of outcome event (\\Delta_2)\ntau restriction time (\\tau)\nmed_inf whether to make inference on the median DOR (default is FALSE)\n\nOutput\n\nt1 vector of times (t)\nsurv1 IPCW estimates of survival function \\hat S_D(t)\nse1 pointwise standard error of \\hat S_D(t)\nmed median estimate of DOR\nmed_se, med_lo, med_hi these are standard error, lower and upper limits of the 95% confidence interval of the median, respectively, if med_inf = TRUE; all NULL if med_inf = FALSE\n\n\n\nA simulated example\nLet’s simulate a data set of size n=200.\n\n# set seed for random number generation\nset.seed(2023)\n\n## simulate data\nn &lt;- 200\n# set restriction time\ntau &lt;- 1.25\n\n# full data\nt1 &lt;- pmin(rexp(n), runif(n, 0, 0.75)) # response time\nt2 &lt;- rexp(n)*1.5 # outcome event time\nt1[t1&gt;t2] &lt;- t2[t1&gt;t2] # set t1 = t2 for non-responders\nc &lt;- runif(n, 0, 1.5) # censoring time\n\n# observed (censored) data\nx1 &lt;- pmin(t1, c)\ndelta1 &lt;- 1*(t1&lt;c)\nx2 &lt;- pmin(t2, c)\ndelta2 &lt;- 1*(t2&lt;c)\n\nSo the observed data consist of x1, delta1, x2, and delta2. Under restriction time tau= 1.25. We analyze the DOR distribution using the main function dorfit(), with inference on the median.\n\nfitLM &lt;- dorfit(x1, delta1, x2, delta2, tau, med_inf = TRUE)\n\nLet’s plot the estimated S_D(t) with 95% pointwise confidence limits.\n\nza &lt;- qnorm(0.975)\n## marginal survival function P(D &gt; t)\nt &lt;- fitLM$t1 # times\nSt &lt;- fitLM$surv1 # P(D &gt; t)\nse &lt;- fitLM$se1 # se of P(D &gt; t)\n\n# set up the figure\nplot(c(0, 1.2), c(0, 1), type=\"n\",xlab=\"t\",ylab=expression(S[D](t)))\n\n# plot the marginal curve P(D &gt; t)\nlines(stepfun(t, c(1,St)),lwd=2, do.points = FALSE) # marginal\nlines(stepfun(t, c(1,St + za * se)),lty = 3, do.points = FALSE) # upper 95% CI \nlines(stepfun(t, c(1,St - za * se)),lty = 3, do.points = FALSE) # lower 95% CI \n\n\n\n\nWe can see that the median is close to 0.6. The precise number and confidence interval (CI) can be obtained from fitLM.\n\n######## get the median ####\nmed &lt;- fitLM$med\nmed\n# [1] 0.551916\n\nmed_lo &lt;- fitLM$med_lo\nmed_hi &lt;- fitLM$med_hi\nmed_lo\n# [1] 0.4018724\nmed_hi\n# [1] 0.7019595\n\nSo the estimated median DOR (95% CI) is 0.552 (0.402, 0.702).\n\n\n\n\n\n\nReferences\n\nHuang, Bo, and Lu Tian. 2022. “Utilizing Restricted Mean Duration of Response for Efficacy Evaluation of Cancer Treatments.” Pharmaceutical Statistics 21 (5): 865–78. https://doi.org/10.1002/pst.2198.\n\n\nHuang, Bo, Lu Tian, Zachary R. McCaw, Xiaodong Luo, Enayet Talukder, Mace Rothenberg, Wanling Xie, Toni K. Choueiri, Dae Hyun Kim, and Lee-Jen Wei. 2020. “Analysis of Response Data for Assessing Treatment Effects in Comparative Clinical Studies.” Annals of Internal Medicine 173 (5): 368–74. https://doi.org/10.7326/m20-0104.\n\n\nHuang, Bo, Lu Tian, Enayet Talukder, Mace Rothenberg, Dae Hyun Kim, and Lee-Jen Wei. 2018. “Evaluating Treatment Effect Based on Duration of Response for a Comparative Oncology Study.” JAMA Oncology 4 (6): 874. https://doi.org/10.1001/jamaoncol.2018.0275.\n\n\nMao, Lu, Lu Tian, Bo Huang, Paul G. Richardson, Ethan B. Ludmir, and Lee-Jen Wei. 2024. “Analysis of Duration-of-Response Data for Oncology Studies.”"
  },
  {
    "objectID": "dor.html",
    "href": "dor.html",
    "title": "The distribution of duration of response",
    "section": "",
    "text": "\\(T_1:\\) time to response;\n\\(T_2:\\) time to progression or death;\n\\(\\tau:\\) restriction time (to be determined by distribution of \\(T_2\\));\n\\(D = T_2\\wedge\\tau - T_1\\wedge\\tau\\).\n\n\n\n\n\\[S_D(t)={\\rm Pr}(D&gt;t), \\hspace{10mm} t\\in [0, \\tau].\\]\n\n\n\n\n\\(C:\\) censoring time;\n\\(X_1 = T_1\\wedge\\tau\\wedge C\\);\n\\(\\delta_1 = I(T_1\\wedge\\tau\\leq C)\\);\n\\(X_2 = T_2\\wedge\\tau\\wedge C\\);\n\\(\\delta_2 = I(T_2\\wedge\\tau\\leq C)\\).\n\nAn random \\(n\\)-sample of \\((X_1,\\delta_1, X_2, \\delta_2)\\) is \\[(X_{1i},\\delta_{1i}, X_{2i}, \\delta_{2i}), \\hspace{5mm} i= 1,\\ldots, n.\\]"
  },
  {
    "objectID": "dor.html#definition",
    "href": "dor.html#definition",
    "title": "The distribution of duration of response",
    "section": "",
    "text": "\\(T_1:\\) time to response;\n\\(T_2:\\) time to progression or death;\n\\(\\tau:\\) restriction time (to be determined by distribution of \\(T_2\\));\n\\(D = T_2\\wedge\\tau - T_1\\wedge\\tau\\).\n\n\n\n\n\\[S_D(t)={\\rm Pr}(D&gt;t), \\hspace{10mm} t\\in [0, \\tau].\\]\n\n\n\n\n\\(C:\\) censoring time;\n\\(X_1 = T_1\\wedge\\tau\\wedge C\\);\n\\(\\delta_1 = I(T_1\\wedge\\tau\\leq C)\\);\n\\(X_2 = T_2\\wedge\\tau\\wedge C\\);\n\\(\\delta_2 = I(T_2\\wedge\\tau\\leq C)\\).\n\nAn random \\(n\\)-sample of \\((X_1,\\delta_1, X_2, \\delta_2)\\) is \\[(X_{1i},\\delta_{1i}, X_{2i}, \\delta_{2i}), \\hspace{5mm} i= 1,\\ldots, n.\\]"
  },
  {
    "objectID": "dor.html#ipcw-estimator",
    "href": "dor.html#ipcw-estimator",
    "title": "The distribution of duration of response",
    "section": "IPCW Estimator",
    "text": "IPCW Estimator\n\\[\\widehat S_D(t)=n^{-1}\\sum_{i=1}^n  \\frac{\\delta_{2i}}{\\widehat{G}_C(X_{2i})}\nI(X_{2i} - X_{1i}&gt; t),\\] where \\(\\widehat{G}_C(t)\\) is the Kaplan–Meier estimator for \\({\\rm Pr}(C &gt; t)\\)."
  },
  {
    "objectID": "dor.html#simulations",
    "href": "dor.html#simulations",
    "title": "The distribution of duration of response",
    "section": "Simulations",
    "text": "Simulations\n\nEstimation of \\(S_D(t)\\)\n\n\nCode\nlibrary(survival)\n## LM's function for IPCW (with se)\nsource(\"DORfunctions.R\")\n\nrm(list=ls())\n# input: (x1, delta1, x2, delta2, tau)\n\n# LT's function for IPCW\ndorsurvfun1=function(x1, delta1, x2, delta2, tau, n.t.grd=100)\n{\n  n=length(x1)\n  x1=pmin(x1, tau)\n  delta1[x1==tau]=1\n  x2=pmin(x2, tau)\n  delta2[x2==tau]=1\n  \n  fitc=survfit(Surv(x2, 1-delta2)~1)\n  time0=c(0, fitc$time)\n  surv0=c(1, fitc$surv)\n  \n\n  weight=rep(0, n)\n  for(ii in 1:n)\n  {if(delta2[ii]&gt;0)\n      weight[ii]=1/min(surv0[time0&lt;=x2[ii]])\n  }\n  \n  t.grd=seq(0, tau, length=n.t.grd)\n  surv.grd=rep(NA, n.t.grd)\n  for(i in 1:n.t.grd)\n  { t0=t.grd[i]\n    surv.grd[i]=sum((x2&gt;x1+t0)*weight)/n\n  }\n  \n  return(list(time=t.grd, surv=surv.grd))\n}\n\n\n## example\n\nn=200\nn.t.grd=100\ntau=1.25\n\nB=1000  # number of simulation\n\nsurv1 = matrix(0, B, n.t.grd)\nsurv1LM = matrix(0, B, n.t.grd)\n\nfor(b in 1:B){\n  t1=pmin(rexp(n), runif(n, 0, 0.75))\n  t2=rexp(n)*1.5\n  t1[t1&gt;t2]=t2[t1&gt;t2]\n  c=runif(n, 0, 1.5)\n\n\n  x1=pmin(t1, c)\n  delta1=1*(t1&lt;c)\n  x2=pmin(t2, c)\n  delta2=1*(t2&lt;c)\n\n  fit1=dorsurvfun1(x1, delta1, x2, delta2, tau, n.t.grd=n.t.grd)\n  surv1[b,]=fit1$surv\n  time0=fit1$time\n  ## added by LM\n  \n  fitLM &lt;- dorfit(x1, delta1, x2, delta2, tau, M=n.t.grd)\n  m &lt;- length(fitLM$t1)\n  surv1LM[b,] &lt;- fitLM$surv1[ecdf(fitLM$t1)(time0) * m]\n  \n  cat(b,\"\\n\")\n}\n\npar(mfrow=c(1,1))\nplot(c(0, tau), c(0, 1), type=\"n\", xlab = \"t\", ylab = expression(S[D](t)))\nlines(time0, apply(surv1, 2, mean), col=2, lwd = 2)  #LT\nlines(time0, apply(surv1LM, 2, mean), col=3) #LM\nlegend(\"topright\", lwd = c(2, 1), col = 2:3, c(\"LT\", \"LM\"))\n\n\n\n\n\n\n\n\n\nEstimation of \\(S_D(t)/S_D(0)\\)\n\n\nCode\nn0=10000\nt1=pmin(rexp(n0), runif(n0, 0, 0.75))\nt2=rexp(n0)*1.5\nt1[t1&gt;t2]=t2[t1&gt;t2]\n\n\nunres &lt;- tibble(dor=c(0, sort((t2-t1)[t2&gt;t1])))\n\nm=length(unres$dor) -1\n\nunres$St &lt;- 1- (0:m)/m\n\nresults |&gt; \n  mutate(\n    ymin = surv_cond * exp(- za * surv_cond_logse),\n    ymax = surv_cond * exp(+ za * surv_cond_logse),\n  ) |&gt; \n  ggplot(aes(x = t, y = surv_cond)) +\n  geom_line(aes(color = \"Restricted\"), lwd = 1.5) +\n  geom_ribbon(aes(ymin = ymin, ymax = ymax), alpha = 0.3) +\n  geom_line(data = unres, aes(x = dor, y = St, color = \"Unrestricted\"), lwd = 1.5) +\n  xlim(0, 1.25) +\n  labs(\n    x = \"Time\",\n    y = \"Survival Probability of DOR\",\n    color = \"Legend\"\n  ) +\n  scale_color_brewer(palette = \"Set1\")\n\n\n\n\n\n\n\nInference of \\(S_D(t)/S_D(0)\\)\n\n\nCode\n### inference \nset.seed(2023)\ntau &lt;- 1.25\n\nn0=1000000\nt1=pmin(rexp(n0), runif(n0, 0, 0.75))\nt2=rexp(n0)*1.5\nt1[t1&gt;t2]=t2[t1&gt;t2]\nt1tau &lt;- pmin(t1, tau)\nt2tau &lt;- pmin(t2, tau)\nt1tau[t1tau&gt;t2tau]=t2tau[t1tau&gt;t2tau]\nres &lt;- tibble(t=c(0, sort((t2tau-t1tau)[t2tau&gt;t1tau])))\nm=length(res$t) - 1\n\n# m\nres$St &lt;- 1 - (0:m)/m\n\n\n# res\n\nt0 &lt;- c(0.25, 0.5, 0.75, 1)\nm &lt;- m + 1\n\nind &lt;- round(ecdf(res$t)(t0) * m)\nres_infer &lt;- res[ind, ]\nres_infer$t &lt;- t0\n\n# res_infer\n\n# Restore it under a different name\nresults2 &lt;- readRDS(\"results2.rds\")\n\n\n\n\ninfer &lt;- merge(res_infer, results2, by = 1)\n\n# infer\n\n\n### tabulate\n\ntab &lt;- infer |&gt; \n  mutate(\n    True = St,\n    Bias = exp(surv_cond_log) - St,\n    SE = surv_cond_empse,\n    SEE = exp(surv_cond_log) * surv_cond_logse,\n    CP = surv_cond_cp\n  ) |&gt; \n  select(t, True, Bias, SE, SEE, CP) \n\nkable(round(tab, 3), caption = \"Table 1. Estimation and inference of Pr(D &gt; t| D &gt;0).\")\n\n\n\nTable 1. Estimation and inference of Pr(D &gt; t| D &gt;0).\n\n\nt\nTrue\nBias\nSE\nSEE\nCP\n\n\n\n\n0.25\n0.847\n-0.002\n0.035\n0.034\n0.944\n\n\n0.50\n0.716\n-0.002\n0.046\n0.046\n0.950\n\n\n0.75\n0.508\n-0.003\n0.071\n0.072\n0.939\n\n\n1.00\n0.276\n-0.013\n0.077\n0.077\n0.948"
  }
]